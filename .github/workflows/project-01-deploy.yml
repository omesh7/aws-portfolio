name: Project 01 - Static Website

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options: ['deploy', 'destroy']
        default: 'deploy'

env:
  AWS_REGION: ap-south-1
  PROJECT_NAME: 01-static-website-aws-portfolio

jobs:
  build-site:
    name: Build Static Site
    runs-on: ubuntu-latest
    if: inputs.action == 'deploy'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '01-static-website-s3/site/package-lock.json'
      
      - name: Install Dependencies
        working-directory: 01-static-website-s3/site
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci
      
      - name: Build Site
        working-directory: 01-static-website-s3/site
        run: |
          echo "üèóÔ∏è Building static site..."
          npm run build
          ls -la dist/
          echo "‚úÖ Site built successfully"
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: 01-static-website-s3/site/dist/
          retention-days: 1

  terraform-infrastructure:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: [build-site]
    if: always() && ((inputs.action == 'deploy' && needs.build-site.result == 'success') || inputs.action == 'destroy')
    outputs:
      s3_bucket_name: ${{ steps.outputs.outputs.s3_bucket_name }}
      cloudfront_distribution_id: ${{ steps.outputs.outputs.cloudfront_distribution_id }}
      website_url: ${{ steps.outputs.outputs.website_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
      
      - name: Terraform Init
        working-directory: 01-static-website-s3/infrastructure
        run: |
          echo "üîß Initializing Terraform..."
          terraform init
      
      - name: Terraform Validate
        working-directory: 01-static-website-s3/infrastructure
        run: |
          echo "‚úÖ Validating Terraform configuration..."
          terraform validate
      
      - name: Terraform Apply
        if: inputs.action == 'deploy'
        working-directory: 01-static-website-s3/infrastructure
        run: |
          echo "üöÄ Applying Terraform configuration..."
          CLOUDFLARE_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          CLOUDFLARE_ZONE="${{ secrets.CLOUDFLARE_ZONE_ID }}"
          ENABLE_DOMAIN="false"
          
          if [ ! -z "$CLOUDFLARE_TOKEN" ] && [ ! -z "$CLOUDFLARE_ZONE" ]; then
            echo "‚úÖ Cloudflare credentials found - enabling custom domain"
            ENABLE_DOMAIN="true"
          else
            echo "‚ö†Ô∏è Cloudflare credentials not found - using CloudFront domain only"
          fi
          
          terraform apply -auto-approve \
            -var="environment=ci" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="cloudflare_api_token=${CLOUDFLARE_TOKEN:-}" \
            -var="cloudflare_zone_id=${CLOUDFLARE_ZONE:-}" \
            -var="enable_custom_domain=$ENABLE_DOMAIN" \
            -var="subdomain=static"
      
      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        working-directory: 01-static-website-s3/infrastructure
        run: |
          echo "üóëÔ∏è Destroying Terraform resources..."
          terraform destroy -auto-approve \
            -var="environment=ci" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}" \
            -var="enable_custom_domain=true" \
            -var="subdomain=static"
      
      - name: Capture Terraform Outputs
        id: outputs
        if: inputs.action == 'deploy'
        working-directory: 01-static-website-s3/infrastructure
        run: |
          echo "üìã Capturing Terraform outputs..."
          echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT
          terraform output -json | jq '.'

  deploy-site:
    name: Deploy Site to S3
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure]
    if: inputs.action == 'deploy'
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: site-build
          path: ./dist
      
      - name: Deploy to S3
        run: |
          echo "üöÄ Deploying to S3 bucket: ${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}"
          aws s3 sync ./dist/ s3://${{ needs.terraform-infrastructure.outputs.s3_bucket_name }}/ --delete
          echo "‚úÖ Site deployed successfully"
      
      - name: Invalidate CloudFront
        run: |
          echo "üîÑ Invalidating CloudFront distribution: ${{ needs.terraform-infrastructure.outputs.cloudfront_distribution_id }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform-infrastructure.outputs.cloudfront_distribution_id }} \
            --paths "/*"
          echo "‚úÖ CloudFront cache invalidated"
      
      - name: Display Website URL
        run: |
          echo "üåê Website deployed successfully!"
          echo "URL: ${{ needs.terraform-infrastructure.outputs.website_url }}"