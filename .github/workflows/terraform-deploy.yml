# name: Deploy Infrastructure
# on:
#   workflow_dispatch:
#     inputs:
#       project_id:
#         description: 'Project to deploy'
#         required: true
#         type: choice
#         options: ['04', '07', '08', '10', '11', '12', '13', '14']
#       action:
#         description: 'Action to perform'
#         required: true
#         type: choice
#         options: ['plan', 'apply', 'destroy']

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
      
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1
      
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.6.0
      
#       - name: Find project directory
#         id: find_dir
#         run: |
#           PROJECT_DIR=$(find . -maxdepth 1 -name "${{ inputs.project_id }}-*" -type d | head -1)
#           echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
#           echo "Found project directory: $PROJECT_DIR"
      
#       - name: Package Lambda (if needed)
#         run: |
#           PROJECT_DIR="${{ steps.find_dir.outputs.project_dir }}"
#           if [ -d "$PROJECT_DIR/lambda" ]; then
#             echo "Packaging Lambda for $PROJECT_DIR"
#             cd $PROJECT_DIR/lambda
#             zip -r ../infrastructure/lambda.zip .
#             echo "âœ… Lambda packaged"
#           else
#             echo "No lambda directory found"
#           fi
      
#       - name: Terraform Init
#         run: |
#           cd ${{ steps.find_dir.outputs.project_dir }}/infrastructure
#           terraform init
      
#       - name: Terraform Plan
#         if: inputs.action == 'plan'
#         run: |
#           cd ${{ steps.find_dir.outputs.project_dir }}/infrastructure
#           terraform plan \
#             -var="environment=ci" \
#             -var="lambda_zip_path=lambda.zip"
      
#       - name: Terraform Apply
#         if: inputs.action == 'apply'
#         run: |
#           cd ${{ steps.find_dir.outputs.project_dir }}/infrastructure
#           terraform apply -auto-approve \
#             -var="environment=ci" \
#             -var="lambda_zip_path=lambda.zip"
      
#       - name: Terraform Destroy
#         if: inputs.action == 'destroy'
#         run: |
#           cd ${{ steps.find_dir.outputs.project_dir }}/infrastructure
#           terraform destroy -auto-approve \
#             -var="environment=ci" \
#             -var="lambda_zip_path=lambda.zip"
      
#       - name: Output results
#         if: inputs.action == 'apply'
#         run: |
#           cd ${{ steps.find_dir.outputs.project_dir }}/infrastructure
#           terraform output