name: Project 11 - Serverless Image Recog Poem Engine

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to Perform"
        required: true
        type: choice
        options: ["deploy", "destroy"]
        default: "destroy"
env:
  AWS_REGION: "ap-south-1"
  PROJECT_NAME: "11-serverless-image-recog-poem-engine"
  ENVIRONMENT: "portfolio"
  TERRAFORM_VERSION: "1.12.0"
  PYTHON_VERSION: "3.12"
  PROJECT_PATH: "11-serverless-image-recog-poem-engine"

jobs:
  package-lambda-functions:
    name: Package Lambda functions into zip files
    if: inputs.action == 'deploy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Zip Lambda Functions
        id: lambda-zips-id
        working-directory: ${{env.PROJECT_PATH}}/lambda
        run: |
          echo "Zipping Up Image-recog lambda"
          cd image_recog && zip -r ../lambda_image_recog.zip . && cd ..
          echo "Zipping Up Upload lambda"
          cd upload && zip -r ../lambda_upload.zip . && cd ..
          echo "Zipping Up Get-poem lambda"
          cd get_poem && zip -r ../lambda_get_poem.zip . && cd ..
          echo "Lambda Packages Created Successfully"

      - name: Upload Lambda Artifacts(upload)
        uses: actions/upload-artifact@v4
        with:
          name: lambda_upload_package
          path: ${{env.PROJECT_PATH}}/lambda/lambda_upload.zip
          retention-days: 1

      - name: Upload Lambda Artifacts(image-recog)
        uses: actions/upload-artifact@v4
        with:
          name: lambda_image_recog_package
          path: ${{env.PROJECT_PATH}}/lambda/lambda_image_recog.zip
          retention-days: 1

      - name: Upload Lambda Artifacts(get-poem)
        uses: actions/upload-artifact@v4
        with:
          name: lambda_get_poem_package
          path: ${{env.PROJECT_PATH}}/lambda/lambda_get_poem.zip
          retention-days: 1

  deploy-infrastructure:
    name: Deploying Infrastructure using Terraform
    if: inputs.action == 'deploy'
    needs: package-lambda-functions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda Artifacts(image-recog)
        uses: actions/download-artifact@v4
        with:
          name: lambda_image_recog_package
          path: ${{env.PROJECT_PATH}}/infrastructure/

      - name: Download Lambda Artifacts(upload)
        uses: actions/download-artifact@v4
        with:
          name: lambda_upload_package
          path: ${{env.PROJECT_PATH}}/infrastructure/

      - name: Download Lambda Artifacts(get-poem)
        uses: actions/download-artifact@v4
        with:
          name: lambda_get_poem_package
          path: ${{env.PROJECT_PATH}}/infrastructure/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          echo "üîß Initializing Terraform..."
          terraform init -input=false

      - name: Terraform Validate
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          echo " Validating Terraform Configuration"
          terraform validate

      - name: Validate Vercel Token
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "‚ö†Ô∏è VERCEL_TOKEN is empty - deploying AWS only"
          else
            echo "‚úÖ VERCEL_TOKEN is set"
            # Basic token format validation
            if [[ "${{ secrets.VERCEL_TOKEN }}" =~ ^[A-Za-z0-9_-]+$ ]]; then
              echo "‚úÖ Token format appears valid"
            else
              echo "‚ùå Token contains invalid characters"
              exit 1
            fi
          fi

      - name: Terraform Apply
        if: inputs.action == 'deploy'
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          echo "üöÄ Applying Terraform configuration..."
          terraform apply -auto-approve \
            -var="environment=ci" \
            -var="aws_region=${{env.AWS_REGION}}" \
            -var="project_name=${{env.PROJECT_NAME}}" \
            -var="lambda_uploads_zip_path=lambda_upload.zip" \
            -var="lambda_image_recog_zip_path=lambda_image_recog.zip" \
            -var="lambda_get_poem_zip_path=lambda_get_poem.zip" \
            -var="vercel_api_token=${{ secrets.VERCEL_TOKEN }}"

      - name: Warm Up Lambda Functions
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          echo "üî• Warming up Lambda functions..."
          UPLOAD_URL=$(terraform output -raw lambda_upload_url)
          GET_POEM_URL=$(terraform output -raw get_poem_url)

          echo "Upload URL: $UPLOAD_URL"
          echo "Get Poem URL: $GET_POEM_URL"

          # Warm upload function
          echo "Warming upload function..."
          curl -X POST "$UPLOAD_URL" \
            -H "Content-Type: application/json" \
            -d '{"fileName":"warmup.jpg"}' || true

          # Warm get_poem function  
          echo "Warming get_poem function..."
          curl "$GET_POEM_URL?poemId=warmup" || true

          echo "‚úÖ Lambda functions warmed up"

      - name: Test S3 Event Trigger
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          BUCKET=$(terraform output -raw s3_bucket_name)
          LAMBDA_NAME=$(terraform output -raw image_recog_lambda_name)
          echo "üß™ Testing S3 trigger with bucket: $BUCKET"
          echo "Lambda function: $LAMBDA_NAME"

          # Create a small test image (1x1 pixel PNG saved as JPG)
          echo "Creating test image..."
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > test.jpg

          # Upload test image to trigger the Lambda
          echo "Uploading test image to trigger processing..."
          TIMESTAMP=$(date +%s)
          TEST_KEY="uploads/test-warmup-$TIMESTAMP.jpg"
          aws s3 cp test.jpg s3://$BUCKET/$TEST_KEY
          echo "Uploaded to: s3://$BUCKET/$TEST_KEY"

          # Verify file was uploaded
          echo "Verifying upload..."
          aws s3 ls s3://$BUCKET/uploads/ | grep test-warmup || echo "File not found in S3"

          # Wait for processing and check logs
          echo "Waiting 15 seconds for processing..."
          sleep 15

          # Check if Lambda was invoked
          echo "Checking Lambda logs..."
          aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/$LAMBDA_NAME" || echo "No log group found"

          # Cleanup test files
          echo "Cleaning up test files..."
          aws s3 rm s3://$BUCKET/$TEST_KEY || true
          rm -f test.jpg

          echo "‚úÖ S3 event trigger test completed"
          
  destroy-infrastructure:
    name: Terraform Init and Destroy
    runs-on: ubuntu-latest
    if: inputs.action == 'destroy'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Creating Dummy Zip Packages if  Doesnt Exists
        if: inputs.action == 'destroy'
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          echo "Creating Dummy lambda to destroy"
          echo 'def lambda_handler(event,context): return {}' > lambda_function.py
          zip -r lambda_upload.zip lambda_function.py
          zip -r lambda_image_recog.zip lambda_function.py
          zip -r lambda_get_poem.zip lambda_function.py
          rm lambda_function.py
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          echo "üîß Initializing Terraform for destroy..."
          terraform init -input=false

      - name: Terraform Destroy
        working-directory: ${{env.PROJECT_PATH}}/infrastructure
        run: |
          echo "üóëÔ∏è Destroying all Infrastructure..."
          VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "‚ö†Ô∏è Deploying AWS only (no Vercel token)"
            VERCEL_TOKEN=""
          fi
          terraform destroy -auto-approve \
           -var="environment=ci" \
           -var="aws_region=${{env.AWS_REGION}}" \
           -var="project_name=${{env.PROJECT_NAME}}" \
           -var="lambda_uploads_zip_path=lambda_upload.zip" \
           -var="lambda_image_recog_zip_path=lambda_image_recog.zip" \
           -var="lambda_get_poem_zip_path=lambda_get_poem.zip" \
           -var="vercel_api_token=$VERCEL_TOKEN"
