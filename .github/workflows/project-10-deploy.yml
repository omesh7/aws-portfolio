name: Project 10 - Kinesis ECR ML Pipeline

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options: ["deploy", "destroy"]
        default: "deploy"

env:
  AWS_REGION: ap-south-1
  PROJECT_NAME: 10-kinesis-ecr-ml
  ECR_REPOSITORY: 10-kinesis-ecr-ml-repository
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  setup-ecr:
    name: Setup ECR Repository
    runs-on: ubuntu-latest
    if: inputs.action == 'deploy'
    outputs:
      ecr_repository_url: ${{ steps.ecr-setup.outputs.ecr_repository_url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform for ECR
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Setup ECR Repository
        id: ecr-setup
        working-directory: 10-KInesis-ECR-ML/state-file-infra
        run: |
          echo "🔧 Setting up ECR repository..."
          terraform init
          terraform apply -auto-approve \
            -var="project_name=${{ env.PROJECT_NAME }}"

          ECR_URL=$(terraform output -raw ecr_repo_uri)
          echo "ecr_repository_url=$ECR_URL" >> $GITHUB_OUTPUT
          echo "✅ ECR Repository URL: $ECR_URL"

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [setup-ecr]
    if: inputs.action == 'deploy'
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: build
        working-directory: 10-KInesis-ECR-ML/producer
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          echo "🐳 Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          echo "📤 Pushing Docker image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "✅ Image pushed: $IMAGE_URI"

  build-lambda:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    if: inputs.action == 'deploy'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Zip Lambda
        working-directory: 10-KInesis-ECR-ML/lambda
        run: |
          echo "📦 Zipping Lambda code..."
          zip -r lambda-package.zip . -x "*.git*" "*.md" "*.txt" "__pycache__/*" "*.pyc"
          ls -la lambda-package.zip
          echo "✅ Lambda package created: $(ls -lh lambda-package.zip | awk '{print $5}')"

      - name: Upload Lambda Package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: 10-KInesis-ECR-ML/lambda/lambda-package.zip
          retention-days: 1

  terraform-infrastructure:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: [setup-ecr, build-and-push-docker, build-lambda]
    if: always() && ((inputs.action == 'deploy' && needs.setup-ecr.result == 'success' && needs.build-and-push-docker.result == 'success' && needs.build-lambda.result == 'success') || inputs.action == 'destroy')
    outputs:
      alb_dns_name: ${{ steps.outputs.outputs.alb_dns_name }}
      kinesis_stream_name: ${{ steps.outputs.outputs.kinesis_stream_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda Package
        if: inputs.action == 'deploy'
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: 10-KInesis-ECR-ML/infrastructure/

      - name: Create Dummy Lambda Package for Destroy
        if: inputs.action == 'destroy'
        working-directory: 10-KInesis-ECR-ML/infrastructure
        run: |
          echo "📦 Creating dummy lambda package for destroy..."
          echo 'def lambda_handler(event, context): return {"status": "dummy"}' > lambda_function.py
          zip lambda-package.zip lambda_function.py
          rm lambda_function.py
          echo "✅ Dummy package created"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: 10-KInesis-ECR-ML/infrastructure
        run: |
          echo "🔧 Initializing Terraform..."
          terraform init

      - name: Terraform Validate
        working-directory: 10-KInesis-ECR-ML/infrastructure
        run: |
          echo "✅ Validating Terraform configuration..."
          terraform validate

      - name: Terraform Apply
        if: inputs.action == 'deploy'
        working-directory: 10-KInesis-ECR-ML/infrastructure
        run: |
          echo "🚀 Applying Terraform configuration..."
          terraform apply -auto-approve \
            -var="environment=ci" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="ecr_repository_url=${{ needs.setup-ecr.outputs.ecr_repository_url }}" \
            -var="image_version=${{ env.IMAGE_TAG }}" \
            -var="lambda_kinesis_zip_path=lambda-package.zip"

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        working-directory: 10-KInesis-ECR-ML/infrastructure
        run: |
          echo "🗑️ Destroying Terraform resources..."
          # Get ECR URL for destroy (if exists)
          ECR_URL=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --query 'repositories[0].repositoryUri' --output text 2>/dev/null || echo "dummy.dkr.ecr.ap-south-1.amazonaws.com/dummy")
          terraform destroy -auto-approve \
            -var="environment=ci" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="ecr_repository_url=$ECR_URL" \
            -var="image_version=dummy" \
            -var="lambda_kinesis_zip_path=lambda-package.zip"

      - name: Capture Terraform Outputs
        id: outputs
        if: inputs.action == 'deploy'
        working-directory: 10-KInesis-ECR-ML/infrastructure
        run: |
          echo "📋 Capturing Terraform outputs..."
          echo "alb_dns_name=$(terraform output -raw alb_dns_name 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          echo "kinesis_stream_name=$(terraform output -raw kinesis_stream_name 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
          terraform output -json | jq '.'

  cleanup-ecr:
    name: Cleanup ECR Repository
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure]
    if: inputs.action == 'destroy'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform for ECR Cleanup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Destroy ECR Repository
        working-directory: 10-KInesis-ECR-ML/state-file-infra
        run: |
          echo "🗑️ Destroying ECR repository..."
          terraform init
          terraform destroy -auto-approve \
            -var="project_name=${{ env.PROJECT_NAME }}"

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [terraform-infrastructure]
    if: inputs.action == 'apply' && needs.terraform-infrastructure.result == 'success'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test Application Load Balancer
        run: |
          ALB_DNS="${{ needs.terraform-infrastructure.outputs.alb_dns_name }}"
          if [ ! -z "$ALB_DNS" ]; then
            echo "🧪 Testing ALB at: http://$ALB_DNS"
            echo "⏳ Waiting for ALB to be ready (60s)..."
            sleep 60
            
            # Test ALB health
            if curl -f -s "http://$ALB_DNS" > /dev/null; then
              echo "✅ ALB is responding"
            else
              echo "⚠️ ALB not ready yet (this is normal for new deployments)"
            fi
          else
            echo "⚠️ No ALB DNS name found"
          fi

      - name: Test Kinesis Stream
        run: |
          STREAM_NAME="${{ needs.terraform-infrastructure.outputs.kinesis_stream_name }}"
          if [ ! -z "$STREAM_NAME" ]; then
            echo "🧪 Testing Kinesis stream: $STREAM_NAME"
            
            # Check stream status
            STREAM_STATUS=$(aws kinesis describe-stream --stream-name "$STREAM_NAME" --region ${{ env.AWS_REGION }} --query 'StreamDescription.StreamStatus' --output text)
            echo "📊 Stream Status: $STREAM_STATUS"
            
            if [ "$STREAM_STATUS" = "ACTIVE" ]; then
              echo "✅ Kinesis stream is active and ready"
            else
              echo "⚠️ Kinesis stream status: $STREAM_STATUS"
            fi
          else
            echo "⚠️ No Kinesis stream name found"
          fi
