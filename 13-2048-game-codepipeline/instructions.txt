# 2048 Game with AWS CodePipeline - Setup Instructions

## Project Overview
A containerized 2048 game deployed via AWS CodePipeline with Lambda backend for game state management.

## Prerequisites
- AWS CLI configured
- Docker installed
- GitHub repository setup
- Terraform installed

## Setup Steps

### 1. GitHub Repository Setup
```bash
# Create new repository on GitHub
# Clone and push this code to your repository
git init
git add .
git commit -m "Initial 2048 game setup"
git remote add origin https://github.com/YOUR_USERNAME/2048-game-aws.git
git push -u origin main
```

### 2. AWS Infrastructure Deployment
```bash
cd infrastructure/
terraform init
terraform plan
terraform apply
```

### 3. CodePipeline Configuration
- Pipeline will automatically trigger on GitHub commits
- CodeBuild will build Docker image and push to ECR
- Lambda function will be updated with new container image

### 4. Environment Variables Setup
- Copy `.env.example` to `.env` in frontend/ directory
- Update VITE_LAMBDA_URL with your Lambda Function URL (from terraform output)
- Set GitHub token in terraform.tfvars

### 5. Local Development
```bash
# Run frontend locally
cd frontend/
npm install
npm run dev

# Test Lambda function locally
cd lambda/
docker build -t 2048-lambda .
docker run -p 9000:8080 2048-lambda
```

## Architecture Components

### Frontend (React + Vite)
- Pre-built 2048 game component
- Game state synchronization with Lambda
- Deployed to S3 + CloudFront

### Lambda Backend
- Game state management
- Score tracking
- Containerized deployment via ECR

### CodePipeline Workflow
1. Source: GitHub repository
2. Build: CodeBuild compiles and containerizes
3. Deploy: Updates Lambda function with new image

### Infrastructure
- ECR repository for container images
- CodeBuild project for CI/CD
- CodePipeline for orchestration
- S3 bucket for frontend hosting
- CloudFront distribution

## Deployment Flow
1. Push code to GitHub
2. CodePipeline triggers automatically
3. CodeBuild builds Docker image
4. Image pushed to ECR
5. Lambda function updated
6. Frontend deployed to S3/CloudFront

## Testing
```bash
# Test game API
curl -X POST https://your-lambda-function-url -d '{"action":"new"}'
curl -X POST https://your-lambda-function-url -d '{"action":"move","direction":"up","gameState":{}}'

# Test frontend
open https://your-cloudfront-domain.com
```

## Monitoring
- CloudWatch logs for Lambda execution
- CodePipeline execution history
- ECR image scan results
- CloudFront access logs

## Future Enhancements
- Multiplayer support
- Leaderboard with DynamoDB
- Real-time updates with WebSockets
- Mobile app integration
- Advanced analytics