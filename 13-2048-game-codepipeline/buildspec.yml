version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URI
      - REPOSITORY_URI=$ECR_REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  
  build:
    commands:
      - echo Build started on `date`
      
      # Navigate to project directory
      - cd 13-2048-game-codepipeline
      
      # Build container image
      - echo Building container image...
      - docker build -f docker/Dockerfile -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      
      # Build frontend
      - echo Building frontend...
      - cd frontend
      - npm install
      - echo "VITE_API_URL=http://$(aws elbv2 describe-load-balancers --names $PROJECT_NAME-alb --query 'LoadBalancers[0].DNSName' --output text)" > .env
      - npm run build
      - cd ..
  
  post_build:
    commands:
      - echo Build completed on `date`
      
      # Push image to ECR
      - echo Pushing image to ECR...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      
      # Update ECS service
      - echo Updating ECS service...
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
      
      # Deploy frontend to S3
      - echo Deploying frontend to S3...
      - aws s3 sync 13-2048-game-codepipeline/frontend/dist/ s3://$S3_BUCKET --delete

artifacts:
  files:
    - '**/*'